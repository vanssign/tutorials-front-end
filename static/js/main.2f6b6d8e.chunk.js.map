{"version":3,"sources":["Components/Layouts/Header.js","Components/TodoItem.js","Components/Todos.js","Components/AddTodo.js","pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","textAlign","background","color","Header","style","to","TodoItem","getStyle","padding","textDecoration","props","todo","completed","this","id","title","type","onChange","toggleComplete","bind","btnStyle","onClick","delTodo","Component","border","Todos","todos","map","key","AddTodo","state","e","setState","target","value","onSubmit","preventDefault","addTodo","name","placeholder","About","Fragment","App","axios","delete","then","res","filter","post","data","get","className","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2f6b6d8e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\n function Header(){\r\n     return(\r\n         <header style={headerStyle}>\r\n             <h1>To Do list</h1>\r\n             <p>Based on Reactjs</p>\r\n             <Link style={{color:\"white\"}} to=\"/\">Home </Link> | \r\n             <Link style={{color:\"white\"}} to=\"/about\">About </Link>\r\n         </header>\r\n     )\r\n }\r\n const headerStyle={\r\n     textAlign:'center',\r\n     background:'black',\r\n     color:'white',\r\n     \r\n };\r\n export default Header;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\ngetStyle=()=>{\r\n    // if(this.props.todo.completed){\r\n    //     return{textDecoration:'Line-through'\r\n    //     }}\r\n\r\n    //     else{\r\n    //         return{\r\n    //             textDecoration:'none'\r\n    //         }\r\n    //     }\r\n    return{\r\n        background:'grey',\r\n        padding:'10px',\r\n        textDecoration:this.props.todo.completed?'Line-through':'none'\r\n    }\r\n    }\r\n    \r\n   \r\n    \r\n\r\n\r\n    render() {\r\n\r\n        const { id, title } = this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                {/* inline styling requires 2{} and no - but camelCase */}\r\n                \r\n                    <input type=\"checkbox\" onChange={this.props.toggleComplete.bind ( this,id )} />\r\n                \r\n                <span>{ title }</span>\r\n                <button style ={btnStyle} onClick={this.props.delTodo.bind(this,id)}>X</button>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\n//PropTypes\r\nTodoItem.propTypes={todos:PropTypes.array.isRequired,\r\n    markComplete:PropTypes.func.isRequired,\r\n    delTodo:PropTypes.func.isRequired\r\n    };\r\n\r\n\r\nconst btnStyle={background: 'red',\r\ncolor:'white',\r\nborder:'1px'};\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\nimport { render } from '@testing-library/react';\r\nimport TodoItem from './TodoItem'\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n   \r\n    render(){\r\n        return this.props.todos.map((todo)=>(\r\n    <TodoItem key=\"todo.id\" todo={todo} delTodo={this.props.delTodo} toggleComplete={this.props.toggleComplete} />\r\n    )\r\n    );\r\n        \r\n  \r\n\r\n}\r\n\r\n}\r\n//PropTypes\r\nTodos.propTypes={todos:PropTypes.array.isRequired,\r\nmarkComplete:PropTypes.func.isRequired,\r\ndelTodo:PropTypes.func.isRequired\r\n};\r\n\r\nexport default Todos;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class AddTodo extends Component {\r\n    state={\r\n        title:''\r\n    }\r\n    onChange=(e)=>this.setState({title:e.target.value});\r\n    //This is only a component state\r\n    onSubmit=(e)=>{\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title:''});}\r\n    \r\n    render() {\r\n        return (\r\n           <form onSubmit={this.onSubmit} style={{textAlign:'center'}}>\r\n               <input type=\"text\" name=\"title\" placeholder=\"Add Todo item\" value={this.state.title}\r\n               onChange={this.onChange} />\r\n               <input type=\"submit\" value=\"Submit\"/>\r\n           </form>\r\n        )\r\n    }\r\n}\r\n\r\n//PropTypes\r\nAddTodo.propTypes={\r\n    addTodo:PropTypes.func.isRequired\r\n    };\r\n\r\nexport default AddTodo\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n     <React.Fragment>\r\n         <h1>About</h1>\r\n         <p>This is a tutorial app for leaning react and getting familaraity with the framework(or library whatever you prefer)</p>\r\n<p>Basics covered :</p>\r\n<ul>\r\n    <li>Basics of components</li>\r\n    <li>Lifecycles:componentDidMount(),Render()</li>\r\n    <li>State:Passing State as prop to Component,setState() method</li>\r\n    <li>PropTypes</li>\r\n    <li>Style Components</li>\r\n    <li>Component Drilling(.bind())</li>\r\n    <li>Key attribute and Generating Unique ids</li>\r\n    <li>React Router:Links and fragmentation</li>\r\n    <li>axios for api requests: get(),post(),delete(``)</li>\r\n\r\n</ul>   \r\n\r\n     </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import React, { Component } from 'react';\nimport { render } from '@testing-library/react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Header from './Components/Layouts/Header'\nimport Todos from './Components/Todos'\nimport AddTodo from './Components/AddTodo'\nimport About from \"./pages/About\";\nimport axios from 'axios'\nimport './App.css';\n\nclass App extends Component {\n  state={\n    todos:[]\n  }\n\n  //Lifecycle that runs before render\n  componentDidMount(){\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n    .then(res=>this.setState({todos:res.data}))\n  }\n\n\n\n  //Toggle the complete status\n  toggleComplete=(id)=>{\n    this.setState({todos: this.state.todos.map((todo)=>{\n      if(todo.id===id){\n        todo.completed=!todo.completed;\n      }\n      return todo;\n    })})\n  }\n  //delete a todoitem\n  delTodo=(id)=>{\n    // this.setState({todos:[...this.state.todos.filter(todo=>todo.id !==id)]})\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n    .then(res=> \n      this.setState({todos:[...this.state.todos.filter(todo=>todo.id !==id)]}))\n\n  }\n  //Add todo\n  addTodo=(title)=>{\n    // var uid=(new Date().getTime()).toString(36);\n    // const newTodo={\n    //   id:uid,\n    //   title,\n    //   completed:false\n    // }\n    // this.setState({todos:[...this.state.todos,newTodo]});\n    axios.post('https://jsonplaceholder.typicode.com/todos',{title,completed:false})\n    .then(res=>this.setState({todos:[...this.state.todos,res.data]}))\n   }\n\n\n  render(){\n  return (\n    <Router>\n    <div className=\"App\">\n      <Header/>\n      <Route exact path=\"/\" render={props =>\n        (<React.Fragment>\n        <AddTodo addTodo={this.addTodo}/>\n      <Todos todos={this.state.todos} toggleComplete={this.toggleComplete} delTodo={this.delTodo} />\n</React.Fragment>)}/>\n<Route path=\"/about\" component={About} />\n      \n     \n    </div>\n    </Router>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}